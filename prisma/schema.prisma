// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password String
  role     Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Team Team[]

  TeamMember TeamMember[]

  Project Project[]

  CreatedTask Task[] @relation("CreatedTask")

  AssignedTasks Task[] @relation("AssignedTask")

  ProjectMember ProjectMember[]

  @@index([role])
}

model Team {
  id        String   @id @default(uuid())
  name      String
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members TeamMember[]

  teamInvite TeamInvite[]

  Project Project[]
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      Role     @default(MEMBER)
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
}

model TeamInvite {
  id      String @id @default(uuid())
  teamId   String
  email String
  token  String @unique

  status String @default("PENDING") //PENDING, ACCEPTED, EXPIRED
  expiresAt DateTime

  team   Team    @relation(fields: [teamId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Project {

  id      String @id @default(uuid())
  name    String
  description       String?

  teamId      String
  team        Team @relation(fields: [teamId], references: [id])

  createdBy    String
  creator      User @relation(fields: [createdBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  Task Task[]

  ProjectMember ProjectMember[]

  @@index([teamId])
}

model ProjectMember {
    id      String @id @default(uuid())
    projectId String
    userId String

    project Project @relation(fields: [projectId], references: [id])
    user User @relation(fields: [userId], references: [id])

    @@index([projectId, userId])
    @@index([projectId])
    @@index([userId])
}

model Task {
   id          String @id @default(uuid())
   title        String
   description    String?
   status       TaskStatus @default(TODO)

   projectId    String
   project      Project @relation(fields: [projectId], references: [id])

   createdBy    String
   creator      User @relation("CreatedTask", fields: [createdBy], references: [id])

   assigneeId    String?  //nullable
   assignee     User? @relation("AssignedTask", fields: [assigneeId], references: [id])

   dueDate      DateTime?

   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([status])

}


enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}


enum Role {
  ADMIN
  MANAGER
  MEMBER
}

enum TeamRole {
  ADMIN
  MEMBER
  MANAGER
}
